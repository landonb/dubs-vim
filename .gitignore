# Ignore Session files (Vim's workspace saver): To track application sessions
# between invocations, Vim uses either a ~/.vim/Session.vim file, or multiple
# files under ~/.vim/sessions/<servername>.vim. Dubs uses the latter approach,
# by using vim's --servername option. This has a few benefits, such as making
# Vim development easier, as you can muck with code in one instance, and kill
# and restart another gvim instance to test modifications.
sessions/

# "netrw is a kind of vim plugin/script which supports reading and writing
# files across networks. .netrwhist is a history file which maintains all
# the directories that were modified."
#   https://stackoverflow.com/questions/9850360/what-is-netrwhist
.netrwhist

# Spell is stored in ~/.waffle since it's user-personal and user-private.
spell

# tags is generated, 'natch.
tags

# The bulk of the bundle/ directory is populated by submodule cloning.
# Except for dubs_all, which is part of the main dubs-vim project.
#
# Ignore generated symlinks.
bundle/dubs_all/cmdt_paths
bundle/dubs_all/dubs_cuts
bundle/dubs_all/dubs_projects.vim
bundle/dubs_all/dubs_tagpaths.vim
bundle/dubs_core
# Ignore personal files.
bundle/dubs_all/.vimprojects
# Ignore misc.
bundle/dubs_all/one_time_setup.sh
bundle/dubs_all/plugin-info.json

bundle/_last_update

# To develop the complete dubs-vim and also the individual
# Dubs Vim submodules requires a bit of finesse.
#
# The bundle_/ directory contains the individually-cloned
# dubs-vim projects (not submoduled) and symlinks to
# the third-party submodules we populated in bundle/.
#
# To see what dubs-vim code is dirty, use git_status_all, e.g.,
#
#  cd ~/.vim/bundle_ ; git_st_all
#
# So we can ignore bundle_/.
bundle_

# Here's a long-winded explanation of the chay-os.
#
# If you want to checkout the dubs-vim project and also all of
# the plugins themselves as source and not just as submodules, you
# have to deal with some conflict, since you'll have two copies of
# every plugin (one of the source and one of the submodule). First,
# mkdir ~/.vim/bundle_ and git clone all the plugins therein. Next,
# make a copy of .vimrc, name it bundle/dubs_all/.vimrc.bundle_,
# and infect bundle_/{} rather than bundle/{}. Link it from
# ~/.vimrc. With this setup, ~/.vim/.git is the dubs-vim
# repository, ~/.vim/bundle is a ton of submodules from github, and
# ~/.vim/bundle_ is a bunch of git clones of the same submodules
# found in ~/.vim/bundle. That way, Vim will load the real source
# under ~/.vim/bundle_ -- and you'll edit the same source when
# tweaking Vim -- but you're also be able to maintain the ~/.vim/.git
# uber plugin that manages everything as submodules. So you can
# really just ignore everything under ~/.vim/bundle and concentrate
# on ~/.vim/bundle_ instead, except for the ~/.vim/bundle/dubs_all
# directory, which is part of dubs-vim (~/.vim/.git). Git it?
bundle/dubs_all/.vimrc.bundle_

# Vim packages.
# 2020-02-25: Rather than manage plugins (i.e., old-style packages)
# by cloning submodules to ~/.vim/bundle, and then inter-symlinking
# with ~/.vim/bundle_, so that some plugins can be developed locally,
# use Vim's new packages feature (see: :help packages) and manually
# install packages under ~/.vim/pack. To keep packages organized,
# use subdirectories to manage packages by their author. E.g., for
# a package you always want loaded, use a path such as, e.g.,
#       ~/.vim/pack/<author>/start/<package>
# - If you later want to disable a package, make it optional by
#   moving the directory under 'opt', e.g.,
#         ~/.vim/pack/<author>/opt/<package>
#   and then should you want to load it, run, e.g.,:
#         :packadd! <package>
# - Because Dubs Vim is transitioning away from using submodules,
#   you might be looking for a way to otherwise manage multiple
#   git repositories. The author recommends myrepos:
#       https://myrepos.branchable.com/
#   paired with the author's myrepos extensions and actions.
#       https://github.com/landonb/ohmyrepos
pack/

# mkview/loadview files.
view/

